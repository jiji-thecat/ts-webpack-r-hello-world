{"version":3,"file":"src_Prac3_tsx.bundle.js","mappings":";;;;;;;;uFAAA,IAAAA,WAAA,CAAAC,mBAAA,iEAOA,IAAAC,MAAA,CAAAD,mBAAA,+CAAkC,IAAAE,QAAA,CAAAC,kBAAA,CAGnB,SAAAD,SAAA,CAAM,CACjB,GAAAG,gBAAS,EAAC,UAAM,CACZ,GAAM,CAAAC,OAAO,CAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CACpDF,OAAO,CAACG,KAAK,CAACC,UAAU,CAAG,mBAAmB,CAC9CJ,OAAO,CAACG,KAAK,CAACE,SAAS,CAAG,eAAe,CACzC,MAAO,WAAM,CACTL,OAAO,CAACG,KAAK,CAACE,SAAS,CAAG,oBAAoB,CAClD,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CACN,MAAQ,GAAAC,eAAI,EAAC,KAAK,CAAE,CAAEC,EAAE,CAAE,WAAW,CAAEJ,KAAK,CAAE,CAAEE,SAAS,CAAE,oBAAqB,CAAC,CAAEG,QAAQ,CAAE,iCAAkC,CAAC,CAAC,CACrI,CAAC","sources":["webpack://ts-webpack-rn/./src/Prac3.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * 3. useEffectを使ってDOM操作をトリガー\n\n    目標: useEffectフックを使ってコンポーネントがマウントまたはアップデートされた際にDOMを操作する練習。\n    練習例: コンポーネントの初回レンダリング時にDOMの特定の部分にアニメーションを追加。\n */\nimport { useEffect } from 'react';\n// elementはidを付与して、document.getElementByIdで取得する。型指定はany\n// styleをいじるときは、element.style.transformなどのようにアクセスする。\nexport default () => {\n    useEffect(() => {\n        const element = document.getElementById('animateMe');\n        element.style.transition = 'transform 1s ease';\n        element.style.transform = 'translateY(0)';\n        return () => {\n            element.style.transform = 'translateY(-100px)';\n        };\n    }, []);\n    return (_jsx(\"div\", { id: \"animateMe\", style: { transform: 'translateY(-100px)' }, children: \"Hello, I will animate on mount!\" }));\n};\n"],"names":["_jsxRuntime","require","_react","_default","exports","default","useEffect","element","document","getElementById","style","transition","transform","_jsx","id","children"],"sourceRoot":""}