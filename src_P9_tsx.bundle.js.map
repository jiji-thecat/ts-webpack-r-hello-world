{"version":3,"file":"src_P9_tsx.bundle.js","mappings":";;;;;;;;kaAAA,IAAAA,WAAA,CAAAC,mBAAA,iEAMA,IAAAC,MAAA,CAAAD,mBAAA,+CACA,GAAM,CAAAE,IAAI,CAAG,KAAK,CAAC,IAAAC,QAAA,CAAAC,kBAAA,CAKJ,SAAAD,SAAA,CAAM,CACjB,GAAM,CAAAG,QAAQ,CAAG,GAAAC,aAAM,EAAC,IAAI,CAAC,CAC7B,IAAAC,SAAA,CAA0B,GAAAC,eAAQ,EAACP,IAAI,CAAC,CAAAQ,UAAA,IAAAC,eAAA,CAAAN,OAAA,EAAAG,SAAA,IAAjCI,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IACtB,GAAM,CAAAI,OAAO,CAAG,GAAAC,kBAAW,EAAC,UAAM,CAC9B,GAAIT,QAAQ,CAACU,OAAO,CAAE,CAClBC,aAAa,CAACX,QAAQ,CAACU,OAAO,CAAC,CAC/BH,QAAQ,CAACX,IAAI,CAAC,CAClB,CACAI,QAAQ,CAACU,OAAO,CAAGE,WAAW,CAAC,UAAM,CACjCL,QAAQ,CAAC,SAACM,IAAI,CAAK,CACf,GAAIA,IAAI,EAAI,CAAC,EAAIb,QAAQ,CAACU,OAAO,CAAE,CAC/BI,YAAY,CAACd,QAAQ,CAACU,OAAO,CAAC,CAC9BK,KAAK,CAAC,YAAY,CAAC,CACnB,MAAO,CAAAnB,IAAI,CACf,CACA,MAAO,CAAAiB,IAAI,CAAG,IAAI,CACtB,CAAC,CAAC,CACN,CAAC,CAAE,IAAI,CAAC,CACZ,CAAC,CAAE,EAAE,CAAC,CACN,MAAQ,GAAAG,gBAAK,EAACC,oBAAS,CAAE,CAAEC,QAAQ,CAAE,CAAC,GAAAF,gBAAK,EAAC,KAAK,CAAE,CAAEG,SAAS,CAAE,MAAM,CAAED,QAAQ,CAAE,CAAC,GAAAE,eAAI,EAAC,KAAK,CAAE,CAAEF,QAAQ,CAAEZ,KAAK,CAAG,EAAE,EAAI,CAAE,CAAC,CAAC,CAAE,GAAAc,eAAI,EAAC,QAAQ,CAAE,CAAEZ,OAAO,CAAEA,OAAO,CAAEU,QAAQ,CAAEtB,IAAI,CAAG,EAAE,EAAI,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,GAAAwB,eAAI,EAAC,OAAO,CAAE,CAAEF,QAAQ,CAAG;AAClO;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAQ,CAAC,CAAC,CAAE,CAAC,CAAC,CACd,CAAC","sources":["webpack://ts-webpack-rn/./src/P9.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n/**\n * 10と書いてあるボタンを用意。そのボタンが押されたらカウントダウンが始まる。\n * ボタンを押されるたびにカウントダウンはリセットされる。\n *\n */\nimport { useState, useCallback, useRef } from 'react';\nconst TIME = 10000;\n/**\n * refを使う理由：refでidを保管することで、refを更新をしてもrerenderが走らない。stateでidを管理しようとするとrerenderが走り、パフォーマンス悪くなる。\n * refはmutable objectだけど、ref.currentはimmutable object.\n */\nexport default () => {\n    const timerRef = useRef(null);\n    const [timer, setTimer] = useState(TIME);\n    const onClick = useCallback(() => {\n        if (timerRef.current) {\n            clearInterval(timerRef.current);\n            setTimer(TIME);\n        }\n        timerRef.current = setInterval(() => {\n            setTimer((prev) => {\n                if (prev <= 0 && timerRef.current) {\n                    clearTimeout(timerRef.current);\n                    alert(\"Time's up!\");\n                    return TIME;\n                }\n                return prev - 1000;\n            });\n        }, 1000);\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsxs(\"div\", { className: \"body\", children: [_jsx(\"div\", { children: timer / 10 ** 3 }), _jsx(\"button\", { onClick: onClick, children: TIME / 10 ** 3 })] }), _jsx(\"style\", { children: `\n        .body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            flex-direction: column;\n        }\n      ` })] }));\n};\n"],"names":["_jsxRuntime","require","_react","TIME","_default","exports","default","timerRef","useRef","_useState","useState","_useState2","_slicedToArray2","timer","setTimer","onClick","useCallback","current","clearInterval","setInterval","prev","clearTimeout","alert","_jsxs","_Fragment","children","className","_jsx"],"sourceRoot":""}